asyncapi: 3.0.0
info:
  title: "ZenWave Online Food Delivery - Orders Module"
  version: 0.0.1
  tags:
    - name: "Default"
    - name: "Orders"

defaultContentType: application/json

servers:
  development:
    host: localhost:9092
    description: Development AMQP broker.
    protocol: kafka

channels:
  CancelOrdersChannel:
    address: "orders.cancel_orders"
    messages:
      CancelOrderInputMessage:
        $ref: '#/components/messages/CancelOrderInputMessage'
  OrdersChannel:
    address: "orders.orders"
    messages:
      OrderEventMessage:
        $ref: '#/components/messages/OrderEventMessage'
  OrderUpdatesChannel:
    address: "orders.order_updates"
    messages:
      OrderStatusUpdatedMessage:
        $ref: '#/components/messages/OrderStatusUpdatedMessage'
  # client channels
  KitchenOrdersStatusChannel:
    address: "restaurants.kitchen_order_status"
    messages:
      KitchenOrderStatusUpdatedMessage:
        $ref: '#/components/messages/KitchenOrderStatusUpdatedMessage'
  DeliveryStatusChannel:
    address: "delivery.delivery_status"
    messages:
      DeliveryStatusUpdatedMessage:
        $ref: '#/components/messages/DeliveryStatusUpdatedMessage'

operations:
  doCancelOrder:
    action: receive
    tags:
      - name: Orders
    channel:
      $ref: '#/channels/CancelOrdersChannel'
  onOrderEvent:
    action: send
    tags:
      - name: Orders
    channel:
      $ref: '#/channels/OrdersChannel'
  onOrderStatusUpdated:
    action: send
    tags:
      - name: Orders
    channel:
      $ref: '#/channels/OrderUpdatesChannel'
  # client operations
  onKitchenOrderStatusUpdated:
    action: receive
    tags:
      - name: RestaurantOrders
    channel:
      $ref: '#/channels/KitchenOrdersStatusChannel'
  onDeliveryStatusUpdated:
    action: receive
    tags:
      - name: Delivery
    channel:
      $ref: '#/channels/DeliveryStatusChannel'

components:
  messages:
    CancelOrderInputMessage:
      name: CancelOrderInputMessage
      title: ""
      summary: ""
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: "#/components/schemas/CancelOrderInput"
    OrderEventMessage:
      name: OrderEventMessage
      title: ""
      summary: ""
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: "#/components/schemas/OrderEvent"
    OrderStatusUpdatedMessage:
      name: OrderStatusUpdatedMessage
      title: ""
      summary: ""
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: "#/components/schemas/OrderStatusUpdated"
    # client messages
    KitchenOrderStatusUpdatedMessage:
      name: KitchenOrderStatusUpdatedMessage
      title: ""
      summary: ""
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: "#/components/schemas/KitchenOrderStatusUpdated"
    DeliveryStatusUpdatedMessage:
      name: DeliveryStatusUpdatedMessage
      title: ""
      summary: ""
      traits:
        - $ref: '#/components/messageTraits/CommonHeaders'
      payload:
        $ref: "#/components/schemas/DeliveryStatusUpdated"

  messageTraits:
    CommonHeaders:
      headers:
        type: object
        properties:
          tracingId:
            type: string
            description: This header value can be populated automatically at runtime (when using ZenWave code generator)
            x-runtime-expression: $tracingIdSupplier
          kafka_messageKey:
            type: string
            description: This header value will be populated automatically at runtime
            x-runtime-expression: $message.payload#/id

  schemas:
    OrderEvent:
      type: "object"
      x-business-entity: "OrderEvent"
      properties:
        orderTime:
          type: "string"
          format: "date-time"
        status:
          $ref: "#/components/schemas/OrderStatus"
        customerDetails:
          $ref: "#/components/schemas/Customer"
        restaurantDetails:
          $ref: "#/components/schemas/Restaurant"
        orderItems:
          type: "array"
          items:
            $ref: "#/components/schemas/OrderItemInput"
        id:
          type: "string"
    OrderStatusUpdated:
      type: "object"
      x-business-entity: "OrderStatusUpdated"
      properties:
        id:
          type: "string"
        dateTime:
          type: "string"
          format: "date-time"
        status:
          $ref: "#/components/schemas/OrderStatus"
        previousStatus:
          $ref: "#/components/schemas/OrderStatus"
    CancelOrderInput:
      type: "object"
      x-business-entity: "CancelOrderInput"
      properties:
        id:
          type: "string"
        reason:
          type: "string"
    Restaurant:
      type: "object"
      x-business-entity: "Restaurant"
      required:
      - "restaurantId"
      - "name"
      - "phone"
      properties:
        restaurantId:
          type: "string"
        name:
          type: "string"
        phone:
          type: "string"
        addresses:
          $ref: "#/components/schemas/Address"
    OrderStatus:
      type: "string"
      x-business-entity: "OrderStatus"
      enum:
      - "RECEIVED"
      - "KITCHEN_ACCEPTED"
      - "DELIVERY_ACCEPTED"
      - "CONFIRMED"
      - "KITCHEN_IN_PROGRESS"
      - "KITCHEN_READY"
      - "KITCHEN_DELIVERED"
      - "ON_DELIVERY"
      - "DELIVERED"
      - "CANCELLED"
    Address:
      type: "object"
      x-business-entity: "Address"
      required:
      - "street"
      properties:
        street:
          type: "string"
        city:
          type: "string"
        state:
          type: "string"
        zip:
          type: "string"
    Customer:
      type: "object"
      x-business-entity: "Customer"
      required:
      - "customerId"
      - "firstName"
      - "lastName"
      - "email"
      - "phone"
      properties:
        customerId:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        phone:
          type: "string"
        address:
          $ref: "#/components/schemas/Address"
    OrderItemInput:
      type: "object"
      x-business-entity: "OrderItemInput"
      required:
      - "menuItemId"
      - "name"
      - "price"
      - "quantity"
      properties:
        menuItemId:
          type: "string"
        name:
          type: "string"
        description:
          type: "string"
        price:
          type: "number"
          format: "double"
        quantity:
          type: "integer"
          format: "int32"

    # client schemas
    KitchenOrderStatusUpdated:
      type: "object"
      x-business-entity: "KitchenOrderStatusUpdated"
      required:
        - "customerOrderId"
        - "kitchenOrderId"
        - "status"
      properties:
        customerOrderId:
          type: "string"
        kitchenOrderId:
          type: "string"
        status:
          $ref: "#/components/schemas/KitchenOrderStatus"
        message:
          type: "string"
    KitchenOrderStatus:
      type: "string"
      x-business-entity: "KitchenOrderStatus"
      enum:
        - "ACCEPTED"
        - "REJECTED"
        - "IN_PROGRESS"
        - "READY"
        - "DELIVERED"
        - "CANCELLED"
    DeliveryStatusUpdated:
      type: "object"
      x-business-entity: "DeliveryStatusUpdated"
      required:
        - "customerOrderId"
        - "deliveryId"
        - "status"
      properties:
        customerOrderId:
          type: "string"
        deliveryId:
          type: "string"
        status:
          $ref: "#/components/schemas/DeliveryStatus"
        message:
          type: "string"
    DeliveryStatus:
      type: "string"
      x-business-entity: "DeliveryStatus"
      enum:
        - "ACCEPTED"
        - "REJECTED"
        - "IN_PROGRESS"
        - "READY"
        - "DELIVERED"
        - "CANCELLED"
